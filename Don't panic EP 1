import java.util.*;
import java.io.*;
import java.math.*;

/**
 * Auto-generated code below aims at helping you parse
 * the standard input according to the problem statement.
 **/
class PlayGround{
    
    private int[][] map; 
    
    public PlayGround (){
        map = new int[1][1];
    }
    
    public PlayGround (int nbEtage, int width){
        map = new int[nbEtage][width];
        
        for(int i = 0; i < nbEtage; i++){
             for(int j = 0; j < nbEtage; j++){
                    map[i][j] = 0;   
             }
        }
        
    }
    
    public void setAssenceurAtPositionOnFloor(int position, int floor){
        
        map[floor][position] = 1;
        
    }
    
    public void setExitAtPositionOnFloor(int position, int floor){
        
        map[floor][position] = 2;
        
    }
    
    public boolean onTheWay(int position, int floor, String direction){
        int[] findOut;
        
        int dimensionZero;
        int dimensionMax;
        int dimension;
        
        if (direction.equals("RIGHT") ){
            
            dimensionZero = position;
            dimensionMax = map[0].length;
        }
        else if (direction.equals("LEFT") ) {
            
            dimensionZero = 0;
            dimensionMax = position + 1;

        } else 
            return false; // NONE pour mis en attente
        
        dimension = dimensionMax - dimensionZero ;
        findOut = new int[dimension];
        findOut = initFindOut(dimension, floor, dimensionZero);
        
        return searchSomethingIn(  findOut  );
        
    }
    
    public boolean searchSomethingIn(int[] floor  ){
        
        for(int i = 0; i < floor.length ; i++){
            if( floor[i] != 0){
                return true;
            }
            
        }
        
        return false;  
        
    }
    
    public int[] initFindOut(int nbCase, int floor, int caseDepart){
        int[] copieTab = new int[nbCase];
        for(int i = 0; i < nbCase; i++){
             copieTab[i] = map[floor][caseDepart + i];
        }
        return copieTab;
        
    }
    
} 
 
 
 
 
class Player {

    public static void main(String args[]) {
        

        
        
        Scanner in = new Scanner(System.in);
        int nbFloors = in.nextInt(); // number of floors
        int width = in.nextInt(); // width of the area
        int nbRounds = in.nextInt(); // maximum number of rounds
        int exitFloor = in.nextInt(); // floor on which the exit is found
        int exitPos = in.nextInt(); // position of the exit on its floor
        int nbTotalClones = in.nextInt(); // number of generated clones
        int nbAdditionalElevators = in.nextInt(); // ignore (always zero)
        int nbElevators = in.nextInt(); // number of elevators
        
        PlayGround playground = new PlayGround(nbFloors, width );        
        playground.setExitAtPositionOnFloor(exitPos, exitFloor);
        
//        int[] elevatorFloor = new int[nbElevators];
 //       int[] elevatorPos = new int[nbElevators];
        for (int i = 0; i < nbElevators; i++) {
            int elevatorFloor = in.nextInt(); // floor on which this elevator is found
            int elevatorPos = in.nextInt(); // position of the elevator on its floor
            playground.setAssenceurAtPositionOnFloor(elevatorPos,elevatorFloor);
        }

        
        int currentFloor = 0;
        // game loop
        while (true) {
            int cloneFloor = in.nextInt(); // floor of the leading clone
            int clonePos = in.nextInt(); // position of the leading clone on its floor
            String direction = in.next(); // direction of the leading clone: LEFT or RIGHT

            if(! playground.onTheWay(clonePos, cloneFloor, direction) )
                 System.out.println("BLOCK"); // action: WAIT or BLOCK
            else
                System.out.println("WAIT"); // action: WAIT or BLOCK
            
        }
    }
}
